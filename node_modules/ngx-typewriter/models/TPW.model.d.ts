export interface TPWInterface {
    textList?: string[];
    text?: string;
    speed?: number;
    color?: string | null;
    selector?: string | null;
    loop?: boolean | null;
    delay?: number;
    classList?: ObjectInterface<ObjectInterface<string, 'key'>, 'className'>;
}
export declare class TPW implements TPWInterface {
    private _color;
    private _text;
    private _selector;
    private _speed;
    private _textList;
    private _loop;
    private _delay;
    private _classList;
    displayText: string;
    private currentText;
    private inAddText;
    constructor(params: TPWInterface);
    get color(): string | null;
    set color(value: string | null);
    get text(): string;
    set text(value: string);
    get selector(): string | null;
    set selector(value: string | null);
    get speed(): number;
    set speed(value: number);
    get textList(): string[];
    set textList(value: string[]);
    get loop(): boolean;
    set loop(value: boolean);
    get delay(): number;
    set delay(value: number);
    get classList(): ObjectInterface<ObjectInterface<string, "key">, "className">;
    set classList(value: ObjectInterface<ObjectInterface<string, "key">, "className">);
    addClass(className: string, style: ObjectInterface<string, "key">): void;
    addText(text: string | string[]): Promise<any>;
    runDisplay(): Promise<void>;
    private static camelCase;
    private static makeClass;
    private replaceText;
    private loopThroughText;
    private loopThroughTextList;
    private Timeout;
}
export interface ObjectInterface<T = any, Id = 'id'> {
    [Id: string]: T;
}
