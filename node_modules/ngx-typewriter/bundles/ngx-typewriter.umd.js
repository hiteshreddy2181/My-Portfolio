(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngx-typewriter', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["ngx-typewriter"] = {}, global.ng.core));
})(this, (function (exports, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var StyleService = /** @class */ (function () {
        function StyleService() {
        }
        Object.defineProperty(StyleService.prototype, "headElement", {
            get: function () {
                if (!this._headElement && document.getElementsByTagName("head").length > 0) {
                    this._headElement = document.getElementsByTagName("head")[0];
                }
                return this._headElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StyleService.prototype, "cssStyleSheet", {
            get: function () {
                if (!this._cssStyleSheet) {
                    if (!document.styleSheets || this.headElement === null)
                        return null;
                    // Get the first style sheet that is enabled and mediaText is empty or screen.
                    this._cssStyleSheet = Array.from(document.styleSheets).find(function (s) { return !s.disabled && (s.media.mediaText == "" || s.media.mediaText.indexOf("screen") !== -1); });
                    // If the style sheet doesn't exist yet, then create it.
                    if (!this._cssStyleSheet)
                        this._cssStyleSheet = this.createCssStyleSheet();
                }
                return this._cssStyleSheet;
            },
            enumerable: false,
            configurable: true
        });
        StyleService.prototype.setStyles = function (selectorText, styles) {
            var rule = this.getStyleRule(selectorText);
            if (!rule)
                return;
            Object.keys(styles).forEach(function (styleName) {
                // @ts-ignore
                rule.style[styleName] = styles[styleName];
            });
        };
        StyleService.prototype.createCssStyleSheet = function () {
            // Create the style sheet element.
            var styleSheetElement = document.createElement("style");
            styleSheetElement.type = "text/css";
            // Append the style sheet element to the head.
            this.headElement.appendChild(styleSheetElement);
            return styleSheetElement.sheet;
        };
        StyleService.prototype.getStyleRule = function (selectorText) {
            if (!this.cssStyleSheet) { // @ts-ignore
                return;
            }
            var rules = this.cssStyleSheet.cssRules.length > 0 || this.cssStyleSheet.rules.length == 0 ? this.cssStyleSheet.cssRules : this.cssStyleSheet.rules;
            var rule = Array.from(rules).find(function (r) { return r instanceof CSSStyleRule && r.selectorText.toLowerCase() == selectorText.toLowerCase(); });
            // If the selector rule does not exist, create it.
            if (!rule) {
                var ruleIndex = this.cssStyleSheet.insertRule(selectorText + "{ }", rules.length);
                rule = rules[ruleIndex];
            }
            return rule;
        };
        return StyleService;
    }());
    StyleService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: StyleService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    StyleService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: StyleService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: StyleService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var NgxTypewriterComponent = /** @class */ (function () {
        function NgxTypewriterComponent(tpWriterService, styleService) {
            this.tpWriterService = tpWriterService;
            this.styleService = styleService;
            this.selector = 'tpw';
            this.marker = '|';
            NgxTypewriterComponent.styleService = this.styleService;
        }
        NgxTypewriterComponent.prototype.ngOnInit = function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, className;
                var e_1, _c;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            this.tpw = this.tpWriterService.getTPW(this.selector, this.options);
                            try {
                                for (_a = __values(Object.keys(this.tpw.classList)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                    className = _b.value;
                                    this.styleService.setStyles("." + className, this.tpw.classList[className]);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                            return [4 /*yield*/, this.tpw.runDisplay()];
                        case 1:
                            _d.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return NgxTypewriterComponent;
    }());
    NgxTypewriterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterComponent, deps: [{ token: NgxTypewriterService }, { token: StyleService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    NgxTypewriterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: NgxTypewriterComponent, selector: "tp-writer", inputs: { options: "options", selector: "selector", marker: "marker" }, ngImport: i0__namespace, template: "\n    <span [style.color]=\"tpw.color ? tpw.color : null\" [innerHTML]=\"tpw.displayText\"></span>\n    <span class=\"marker\">{{marker}}</span>\n  ", isInline: true, styles: [".marker { animation: 0.5s ease 0s infinite normal none running blink; } @keyframes blink {from {opacity: 0;} to {opacity: 1;}}"] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tp-writer',
                        template: "\n    <span [style.color]=\"tpw.color ? tpw.color : null\" [innerHTML]=\"tpw.displayText\"></span>\n    <span class=\"marker\">{{marker}}</span>\n  ",
                        styles: ['.marker { animation: 0.5s ease 0s infinite normal none running blink; } @keyframes blink {from {opacity: 0;} to {opacity: 1;}}']
                    }]
            }], ctorParameters: function () { return [{ type: NgxTypewriterService }, { type: StyleService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], selector: [{
                    type: i0.Input
                }], marker: [{
                    type: i0.Input
                }] } });

    var TPW = /** @class */ (function () {
        function TPW(params) {
            var e_1, _a;
            this._color = null;
            this._text = '';
            this._selector = null;
            this._speed = 70;
            this._textList = [];
            this._loop = false;
            this._delay = 1000;
            this._classList = {};
            this.displayText = '';
            this.currentText = 0;
            this.inAddText = false;
            if (!params) {
                return this;
            }
            try {
                for (var _b = __values(Object.keys(params)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var key = _c.value;
                    var propDescriptor = Object.getOwnPropertyDescriptor(this, "_" + key);
                    if (propDescriptor !== undefined && propDescriptor.writable) {
                        try {
                            // @ts-ignore
                            this[key] = params[key];
                        }
                        catch (e) {
                            if (!(e instanceof TypeError)) {
                                throw e;
                            }
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (this.textList.length === 0) {
                this.textList.push(this.text);
            }
            else {
                if (!this.text) {
                    this.text = this.textList[this.textList.length - 1];
                }
            }
        }
        Object.defineProperty(TPW.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (value) {
                this._color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (value) {
                this._text = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "selector", {
            get: function () {
                return this._selector;
            },
            set: function (value) {
                this._selector = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "speed", {
            get: function () {
                return this._speed;
            },
            set: function (value) {
                this._speed = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "textList", {
            get: function () {
                return this._textList;
            },
            set: function (value) {
                this._textList = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "loop", {
            get: function () {
                return this._loop;
            },
            set: function (value) {
                this._loop = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "delay", {
            get: function () {
                return this._delay;
            },
            set: function (value) {
                this._delay = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TPW.prototype, "classList", {
            get: function () {
                return this._classList;
            },
            set: function (value) {
                this._classList = value;
            },
            enumerable: false,
            configurable: true
        });
        TPW.prototype.addClass = function (className, style) {
            this.classList[className] = style;
            NgxTypewriterComponent.styleService.setStyles("." + className, style);
        };
        TPW.prototype.addText = function (text) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.inAddText) {
                                return [2 /*return*/];
                            }
                            this.inAddText = true;
                            if (!(this.currentText !== this.textList.length)) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.Timeout(500)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, this.addText(text)];
                        case 2:
                            if (typeof text === 'string') {
                                this.textList.push(text);
                            }
                            else {
                                this.textList = __spreadArray(__spreadArray([], __read(this.textList)), __read(text));
                            }
                            return [4 /*yield*/, this.loopThroughTextList(this.currentText)];
                        case 3:
                            _a.sent();
                            this.inAddText = false;
                            return [2 /*return*/];
                    }
                });
            });
        };
        TPW.prototype.runDisplay = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.displayText = '';
                            return [4 /*yield*/, this.loopThroughTextList()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        TPW.camelCase = function (text) {
            return text.replace(/-([a-z])/ig, function (all, letter) {
                return letter.toUpperCase();
            });
        };
        TPW.makeClass = function (length) {
            var result = '';
            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
            var charactersLength = characters.length;
            for (var i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() *
                    charactersLength));
            }
            return result;
        };
        TPW.prototype.replaceText = function (text, replace) {
            var index = this.textList.indexOf(text);
            this.textList[index] = replace;
            if (this.text === text) {
                this.text = text;
            }
        };
        TPW.prototype.loopThroughText = function (text, index) {
            if (index === void 0) { index = 0; }
            return __awaiter(this, void 0, void 0, function () {
                var style, classList, regex, input, list, current, params, className, regex1, input;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!(index < text.length)) return [3 /*break*/, 3];
                            if (text[index] === '#' && text.substr(index, 8) === '#tpw-key') {
                                style = {};
                                classList = [];
                                regex = /#tpw-key\((.*?)\)#/;
                                input = regex.exec(text);
                                if (input) {
                                    list = input[1].split(',');
                                    for (current = 1; current < list.length; current++) {
                                        params = list[current].split(':');
                                        if (params.length !== 2) {
                                            break;
                                        }
                                        else {
                                            if (TPW.camelCase(params[0].trim()) in ListCSSProperties) {
                                                style[params[0].trim()] = params[1].trim();
                                            }
                                            else if (params[0].trim() === 'class') {
                                                classList.push(params[1].trim());
                                            }
                                        }
                                    }
                                    className = TPW.makeClass(5);
                                    classList.push(className);
                                    this.replaceText(text, text.replace(input[0], "<span class=\"" + classList.join(' ') + "\">" + list[0] + "</span>"));
                                    text = text.replace(input[0], "<span class=\"" + classList.join(' ') + "\">" + list[0] + "</span>");
                                    index += ("<span class=\"" + classList.join(' ') + "\">").length;
                                    if (Object.keys(style).length > 0) {
                                        NgxTypewriterComponent.styleService.setStyles("." + className, style);
                                    }
                                }
                            }
                            if (text[index] === '<' && text.substr(index, 7) === '</span>') {
                                index += 7;
                            }
                            if (text[index] === '<' && text.substr(index, 12) === '<span class=') {
                                regex1 = /<span(.*?)>/;
                                input = regex1.exec(text);
                                if (input)
                                    index += input[0].length;
                            }
                            this.displayText = text.substr(0, index + 1);
                            index += 1;
                            return [4 /*yield*/, this.Timeout()];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.loopThroughText(text, index)];
                        case 2:
                            _a.sent();
                            _a.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        };
        TPW.prototype.loopThroughTextList = function (index) {
            if (index === void 0) { index = 0; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.currentText = index;
                            if (!(index < this.textList.length)) return [3 /*break*/, 4];
                            return [4 /*yield*/, this.loopThroughText(this.textList[index])];
                        case 1:
                            _a.sent();
                            index += 1;
                            return [4 /*yield*/, this.Timeout(this.delay)];
                        case 2:
                            _a.sent();
                            return [4 /*yield*/, this.loopThroughTextList(index)];
                        case 3:
                            _a.sent();
                            return [3 /*break*/, 6];
                        case 4:
                            if (!this.loop) return [3 /*break*/, 6];
                            return [4 /*yield*/, this.runDisplay()];
                        case 5:
                            _a.sent();
                            _a.label = 6;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        TPW.prototype.Timeout = function (time) {
            var _this = this;
            return new Promise(function (resolve) { return setTimeout(resolve, time ? time : _this.speed); });
        };
        return TPW;
    }());
    var ListCSSProperties = {
        alignContent: null,
        alignItems: null,
        alignSelf: null,
        alignmentBaseline: null,
        all: null,
        animation: null,
        animationDelay: null,
        animationDirection: null,
        animationDuration: null,
        animationFillMode: null,
        animationIterationCount: null,
        animationName: null,
        animationPlayState: null,
        animationTimingFunction: null,
        backfaceVisibility: null,
        background: null,
        backgroundAttachment: null,
        backgroundClip: null,
        backgroundColor: null,
        backgroundImage: null,
        backgroundOrigin: null,
        backgroundPosition: null,
        backgroundPositionX: null,
        backgroundPositionY: null,
        backgroundRepeat: null,
        backgroundSize: null,
        baselineShift: null,
        blockSize: null,
        border: null,
        borderBlockEnd: null,
        borderBlockEndColor: null,
        borderBlockEndStyle: null,
        borderBlockEndWidth: null,
        borderBlockStart: null,
        borderBlockStartColor: null,
        borderBlockStartStyle: null,
        borderBlockStartWidth: null,
        borderBottom: null,
        borderBottomColor: null,
        borderBottomLeftRadius: null,
        borderBottomRightRadius: null,
        borderBottomStyle: null,
        borderBottomWidth: null,
        borderCollapse: null,
        borderColor: null,
        borderImage: null,
        borderImageOutset: null,
        borderImageRepeat: null,
        borderImageSlice: null,
        borderImageSource: null,
        borderImageWidth: null,
        borderInlineEnd: null,
        borderInlineEndColor: null,
        borderInlineEndStyle: null,
        borderInlineEndWidth: null,
        borderInlineStart: null,
        borderInlineStartColor: null,
        borderInlineStartStyle: null,
        borderInlineStartWidth: null,
        borderLeft: null,
        borderLeftColor: null,
        borderLeftStyle: null,
        borderLeftWidth: null,
        borderRadius: null,
        borderRight: null,
        borderRightColor: null,
        borderRightStyle: null,
        borderRightWidth: null,
        borderSpacing: null,
        borderStyle: null,
        borderTop: null,
        borderTopColor: null,
        borderTopLeftRadius: null,
        borderTopRightRadius: null,
        borderTopStyle: null,
        borderTopWidth: null,
        borderWidth: null,
        bottom: null,
        boxShadow: null,
        boxSizing: null,
        breakAfter: null,
        breakBefore: null,
        breakInside: null,
        captionSide: null,
        caretColor: null,
        clear: null,
        clip: null,
        clipPath: null,
        clipRule: null,
        color: null,
        colorInterpolation: null,
        colorInterpolationFilters: null,
        columnCount: null,
        columnFill: null,
        columnGap: null,
        columnRule: null,
        columnRuleColor: null,
        columnRuleStyle: null,
        columnRuleWidth: null,
        columnSpan: null,
        columnWidth: null,
        columns: null,
        content: null,
        counterIncrement: null,
        counterReset: null,
        cssFloat: null,
        cssText: null,
        cursor: null,
        direction: null,
        display: null,
        dominantBaseline: null,
        emptyCells: null,
        fill: null,
        fillOpacity: null,
        fillRule: null,
        filter: null,
        flex: null,
        flexBasis: null,
        flexDirection: null,
        flexFlow: null,
        flexGrow: null,
        flexShrink: null,
        flexWrap: null,
        float: null,
        floodColor: null,
        floodOpacity: null,
        font: null,
        fontFamily: null,
        fontFeatureSettings: null,
        fontKerning: null,
        fontSize: null,
        fontSizeAdjust: null,
        fontStretch: null,
        fontStyle: null,
        fontSynthesis: null,
        fontVariant: null,
        fontVariantCaps: null,
        fontVariantEastAsian: null,
        fontVariantLigatures: null,
        fontVariantNumeric: null,
        fontVariantPosition: null,
        fontWeight: null,
        gap: null,
        glyphOrientationVertical: null,
        grid: null,
        gridArea: null,
        gridAutoColumns: null,
        gridAutoFlow: null,
        gridAutoRows: null,
        gridColumn: null,
        gridColumnEnd: null,
        gridColumnGap: null,
        gridColumnStart: null,
        gridGap: null,
        gridRow: null,
        gridRowEnd: null,
        gridRowGap: null,
        gridRowStart: null,
        gridTemplate: null,
        gridTemplateAreas: null,
        gridTemplateColumns: null,
        gridTemplateRows: null,
        height: null,
        hyphens: null,
        imageOrientation: null,
        imageRendering: null,
        inlineSize: null,
        justifyContent: null,
        justifyItems: null,
        justifySelf: null,
        left: null,
        readonly: null,
        letterSpacing: null,
        lightingColor: null,
        lineBreak: null,
        lineHeight: null,
        listStyle: null,
        listStyleImage: null,
        listStylePosition: null,
        listStyleType: null,
        margin: null,
        marginBlockEnd: null,
        marginBlockStart: null,
        marginBottom: null,
        marginInlineEnd: null,
        marginInlineStart: null,
        marginLeft: null,
        marginRight: null,
        marginTop: null,
        marker: null,
        markerEnd: null,
        markerMid: null,
        markerStart: null,
        mask: null,
        maskComposite: null,
        maskImage: null,
        maskPosition: null,
        maskRepeat: null,
        maskSize: null,
        maskType: null,
        maxBlockSize: null,
        maxHeight: null,
        maxInlineSize: null,
        maxWidth: null,
        minBlockSize: null,
        minHeight: null,
        minInlineSize: null,
        minWidth: null,
        objectFit: null,
        objectPosition: null,
        opacity: null,
        order: null,
        orphans: null,
        outline: null,
        outlineColor: null,
        outlineOffset: null,
        outlineStyle: null,
        outlineWidth: null,
        overflow: null,
        overflowAnchor: null,
        overflowWrap: null,
        overflowX: null,
        overflowY: null,
        overscrollBehavior: null,
        overscrollBehaviorBlock: null,
        overscrollBehaviorInline: null,
        overscrollBehaviorX: null,
        overscrollBehaviorY: null,
        padding: null,
        paddingBlockEnd: null,
        paddingBlockStart: null,
        paddingBottom: null,
        paddingInlineEnd: null,
        paddingInlineStart: null,
        paddingLeft: null,
        paddingRight: null,
        paddingTop: null,
        pageBreakAfter: null,
        pageBreakBefore: null,
        pageBreakInside: null,
        paintOrder: null,
        perspective: null,
        perspectiveOrigin: null,
        placeContent: null,
        placeItems: null,
        placeSelf: null,
        pointerEvents: null,
        position: null,
        quotes: null,
        resize: null,
        right: null,
        rotate: null,
        rowGap: null,
        rubyAlign: null,
        rubyPosition: null,
        scale: null,
        scrollBehavior: null,
        shapeRendering: null,
        stopColor: null,
        stopOpacity: null,
        stroke: null,
        strokeDasharray: null,
        strokeDashoffset: null,
        strokeLinecap: null,
        strokeLinejoin: null,
        strokeMiterlimit: null,
        strokeOpacity: null,
        strokeWidth: null,
        tabSize: null,
        tableLayout: null,
        textAlign: null,
        textAlignLast: null,
        textAnchor: null,
        textCombineUpright: null,
        textDecoration: null,
        textDecorationColor: null,
        textDecorationLine: null,
        textDecorationStyle: null,
        textEmphasis: null,
        textEmphasisColor: null,
        textEmphasisPosition: null,
        textEmphasisStyle: null,
        textIndent: null,
        textJustify: null,
        textOrientation: null,
        textOverflow: null,
        textRendering: null,
        textShadow: null,
        textTransform: null,
        textUnderlinePosition: null,
        top: null,
        touchAction: null,
        transform: null,
        transformBox: null,
        transformOrigin: null,
        transformStyle: null,
        transition: null,
        transitionDelay: null,
        transitionDuration: null,
        transitionProperty: null,
        transitionTimingFunction: null,
        translate: null,
        unicodeBidi: null,
        userSelect: null,
        verticalAlign: null,
        visibility: null,
        /** @deprecated */
        webkitAlignContent: null,
        /** @deprecated */
        webkitAlignItems: null,
        /** @deprecated */
        webkitAlignSelf: null,
        /** @deprecated */
        webkitAnimation: null,
        /** @deprecated */
        webkitAnimationDelay: null,
        /** @deprecated */
        webkitAnimationDirection: null,
        /** @deprecated */
        webkitAnimationDuration: null,
        /** @deprecated */
        webkitAnimationFillMode: null,
        /** @deprecated */
        webkitAnimationIterationCount: null,
        /** @deprecated */
        webkitAnimationName: null,
        /** @deprecated */
        webkitAnimationPlayState: null,
        /** @deprecated */
        webkitAnimationTimingFunction: null,
        /** @deprecated */
        webkitAppearance: null,
        /** @deprecated */
        webkitBackfaceVisibility: null,
        /** @deprecated */
        webkitBackgroundClip: null,
        /** @deprecated */
        webkitBackgroundOrigin: null,
        /** @deprecated */
        webkitBackgroundSize: null,
        /** @deprecated */
        webkitBorderBottomLeftRadius: null,
        /** @deprecated */
        webkitBorderBottomRightRadius: null,
        /** @deprecated */
        webkitBorderRadius: null,
        /** @deprecated */
        webkitBorderTopLeftRadius: null,
        /** @deprecated */
        webkitBorderTopRightRadius: null,
        /** @deprecated */
        webkitBoxAlign: null,
        /** @deprecated */
        webkitBoxFlex: null,
        /** @deprecated */
        webkitBoxOrdinalGroup: null,
        /** @deprecated */
        webkitBoxOrient: null,
        /** @deprecated */
        webkitBoxPack: null,
        /** @deprecated */
        webkitBoxShadow: null,
        /** @deprecated */
        webkitBoxSizing: null,
        /** @deprecated */
        webkitFilter: null,
        /** @deprecated */
        webkitFlex: null,
        /** @deprecated */
        webkitFlexBasis: null,
        /** @deprecated */
        webkitFlexDirection: null,
        /** @deprecated */
        webkitFlexFlow: null,
        /** @deprecated */
        webkitFlexGrow: null,
        /** @deprecated */
        webkitFlexShrink: null,
        /** @deprecated */
        webkitFlexWrap: null,
        /** @deprecated */
        webkitJustifyContent: null,
        webkitLineClamp: null,
        /** @deprecated */
        webkitMask: null,
        /** @deprecated */
        webkitMaskBoxImage: null,
        /** @deprecated */
        webkitMaskBoxImageOutset: null,
        /** @deprecated */
        webkitMaskBoxImageRepeat: null,
        /** @deprecated */
        webkitMaskBoxImageSlice: null,
        /** @deprecated */
        webkitMaskBoxImageSource: null,
        /** @deprecated */
        webkitMaskBoxImageWidth: null,
        /** @deprecated */
        webkitMaskClip: null,
        /** @deprecated */
        webkitMaskComposite: null,
        /** @deprecated */
        webkitMaskImage: null,
        /** @deprecated */
        webkitMaskOrigin: null,
        /** @deprecated */
        webkitMaskPosition: null,
        /** @deprecated */
        webkitMaskRepeat: null,
        /** @deprecated */
        webkitMaskSize: null,
        /** @deprecated */
        webkitOrder: null,
        /** @deprecated */
        webkitPerspective: null,
        /** @deprecated */
        webkitPerspectiveOrigin: null,
        webkitTapHighlightColor: null,
        /** @deprecated */
        webkitTextFillColor: null,
        /** @deprecated */
        webkitTextSizeAdjust: null,
        /** @deprecated */
        webkitTextStroke: null,
        /** @deprecated */
        webkitTextStrokeColor: null,
        /** @deprecated */
        webkitTextStrokeWidth: null,
        /** @deprecated */
        webkitTransform: null,
        /** @deprecated */
        webkitTransformOrigin: null,
        /** @deprecated */
        webkitTransformStyle: null,
        /** @deprecated */
        webkitTransition: null,
        /** @deprecated */
        webkitTransitionDelay: null,
        /** @deprecated */
        webkitTransitionDuration: null,
        /** @deprecated */
        webkitTransitionProperty: null,
        /** @deprecated */
        webkitTransitionTimingFunction: null,
        /** @deprecated */
        webkitUserSelect: null,
        whiteSpace: null,
        widows: null,
        width: null,
        willChange: null,
        wordBreak: null,
        wordSpacing: null,
        wordWrap: null,
        writingMode: null,
        zIndex: null,
        /** @deprecated */
        zoom: null,
    };

    var NgxTypewriterService = /** @class */ (function () {
        function NgxTypewriterService() {
            this.list = {};
        }
        NgxTypewriterService.prototype.getTPW = function (selector, options) {
            if (!this.list.hasOwnProperty(selector) && options) {
                this.list[selector] = new TPW(options);
            }
            return this.list[selector] || null;
        };
        return NgxTypewriterService;
    }());
    NgxTypewriterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NgxTypewriterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return []; } });

    var NgxTypewriterModule = /** @class */ (function () {
        function NgxTypewriterModule() {
        }
        return NgxTypewriterModule;
    }());
    NgxTypewriterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    NgxTypewriterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterModule, declarations: [NgxTypewriterComponent], exports: [NgxTypewriterComponent] });
    NgxTypewriterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterModule, imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NgxTypewriterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            NgxTypewriterComponent,
                        ],
                        imports: [],
                        exports: [
                            NgxTypewriterComponent
                        ]
                    }]
            }] });

    /*
     * Public API Surface of ngx-typewriter
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxTypewriterComponent = NgxTypewriterComponent;
    exports.NgxTypewriterModule = NgxTypewriterModule;
    exports.NgxTypewriterService = NgxTypewriterService;
    exports.TPW = TPW;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-typewriter.umd.js.map
