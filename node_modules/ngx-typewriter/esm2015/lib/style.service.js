import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class StyleService {
    constructor() { }
    get headElement() {
        if (!this._headElement && document.getElementsByTagName("head").length > 0) {
            this._headElement = document.getElementsByTagName("head")[0];
        }
        return this._headElement;
    }
    get cssStyleSheet() {
        if (!this._cssStyleSheet) {
            if (!document.styleSheets || this.headElement === null)
                return null;
            // Get the first style sheet that is enabled and mediaText is empty or screen.
            this._cssStyleSheet = Array.from(document.styleSheets).find(s => !s.disabled && (s.media.mediaText == "" || s.media.mediaText.indexOf("screen") !== -1));
            // If the style sheet doesn't exist yet, then create it.
            if (!this._cssStyleSheet)
                this._cssStyleSheet = this.createCssStyleSheet();
        }
        return this._cssStyleSheet;
    }
    setStyles(selectorText, styles) {
        let rule = this.getStyleRule(selectorText);
        if (!rule)
            return;
        Object.keys(styles).forEach(styleName => {
            // @ts-ignore
            rule.style[styleName] = styles[styleName];
        });
    }
    createCssStyleSheet() {
        // Create the style sheet element.
        let styleSheetElement = document.createElement("style");
        styleSheetElement.type = "text/css";
        // Append the style sheet element to the head.
        this.headElement.appendChild(styleSheetElement);
        return styleSheetElement.sheet;
    }
    getStyleRule(selectorText) {
        if (!this.cssStyleSheet) { // @ts-ignore
            return;
        }
        let rules = this.cssStyleSheet.cssRules.length > 0 || this.cssStyleSheet.rules.length == 0 ? this.cssStyleSheet.cssRules : this.cssStyleSheet.rules;
        let rule = Array.from(rules).find(r => r instanceof CSSStyleRule && r.selectorText.toLowerCase() == selectorText.toLowerCase());
        // If the selector rule does not exist, create it.
        if (!rule) {
            let ruleIndex = this.cssStyleSheet.insertRule(selectorText + "{ }", rules.length);
            rule = rules[ruleIndex];
        }
        return rule;
    }
}
StyleService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StyleService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
StyleService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StyleService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StyleService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3R5bGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC10eXBld3JpdGVyL3NyYy9saWIvc3R5bGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQyxNQUFNLE9BQU8sWUFBWTtJQW9CdkIsZ0JBQWUsQ0FBQztJQWxCaEIsSUFBWSxXQUFXO1FBQ3JCLElBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxJQUFJLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pFLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRCxJQUFZLGFBQWE7UUFDdkIsSUFBRyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsSUFBRyxDQUFDLFFBQVEsQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJO2dCQUFFLE9BQU8sSUFBSSxDQUFDO1lBQ25FLDhFQUE4RTtZQUM5RSxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBa0IsQ0FBQztZQUUxSyx3REFBd0Q7WUFDeEQsSUFBRyxDQUFDLElBQUksQ0FBQyxjQUFjO2dCQUFFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7U0FDM0U7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUdNLFNBQVMsQ0FBQyxZQUFvQixFQUFFLE1BQTZEO1FBQ2xHLElBQUksSUFBSSxHQUFpQixJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pELElBQUcsQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUNqQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUN0QyxhQUFhO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLGtDQUFrQztRQUNsQyxJQUFJLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsaUJBQWlCLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUNwQyw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoRCxPQUFPLGlCQUFpQixDQUFDLEtBQXNCLENBQUM7SUFDbEQsQ0FBQztJQUVPLFlBQVksQ0FBQyxZQUFvQjtRQUN2QyxJQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLGFBQWE7WUFDckMsT0FBTztTQUNSO1FBQ0QsSUFBSSxLQUFLLEdBQWdCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1FBQ2pLLElBQUksSUFBSSxHQUFpQixLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxZQUFZLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsSUFBSSxZQUFZLENBQUMsV0FBVyxFQUFFLENBQWlCLENBQUM7UUFDOUosa0RBQWtEO1FBQ2xELElBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDUixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRixJQUFJLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBaUIsQ0FBQztTQUN6QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7eUdBcERVLFlBQVk7NkdBQVosWUFBWSxjQUZYLE1BQU07MkZBRVAsWUFBWTtrQkFIeEIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbkBJbmplY3RhYmxlKHtcclxuICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFN0eWxlU2VydmljZSB7XHJcbiAgcHJpdmF0ZSBfaGVhZEVsZW1lbnQhOiBIVE1MSGVhZEVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBnZXQgaGVhZEVsZW1lbnQoKTogSFRNTEhlYWRFbGVtZW50IHtcclxuICAgIGlmKCF0aGlzLl9oZWFkRWxlbWVudCAmJiBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIikubGVuZ3RoID4gMCkge1xyXG4gICAgICB0aGlzLl9oZWFkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLl9oZWFkRWxlbWVudDtcclxuICB9XHJcbiAgcHJpdmF0ZSBfY3NzU3R5bGVTaGVldCE6IENTU1N0eWxlU2hlZXQ7XHJcbiAgcHJpdmF0ZSBnZXQgY3NzU3R5bGVTaGVldCgpOiBDU1NTdHlsZVNoZWV0IHwgbnVsbCB7XHJcbiAgICBpZighdGhpcy5fY3NzU3R5bGVTaGVldCkge1xyXG4gICAgICBpZighZG9jdW1lbnQuc3R5bGVTaGVldHMgfHwgdGhpcy5oZWFkRWxlbWVudCA9PT0gbnVsbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgIC8vIEdldCB0aGUgZmlyc3Qgc3R5bGUgc2hlZXQgdGhhdCBpcyBlbmFibGVkIGFuZCBtZWRpYVRleHQgaXMgZW1wdHkgb3Igc2NyZWVuLlxyXG4gICAgICB0aGlzLl9jc3NTdHlsZVNoZWV0ID0gQXJyYXkuZnJvbShkb2N1bWVudC5zdHlsZVNoZWV0cykuZmluZChzID0+ICFzLmRpc2FibGVkICYmIChzLm1lZGlhLm1lZGlhVGV4dCA9PSBcIlwiIHx8IHMubWVkaWEubWVkaWFUZXh0LmluZGV4T2YoXCJzY3JlZW5cIikgIT09IC0xKSkgYXMgQ1NTU3R5bGVTaGVldDtcclxuXHJcbiAgICAgIC8vIElmIHRoZSBzdHlsZSBzaGVldCBkb2Vzbid0IGV4aXN0IHlldCwgdGhlbiBjcmVhdGUgaXQuXHJcbiAgICAgIGlmKCF0aGlzLl9jc3NTdHlsZVNoZWV0KSB0aGlzLl9jc3NTdHlsZVNoZWV0ID0gdGhpcy5jcmVhdGVDc3NTdHlsZVNoZWV0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5fY3NzU3R5bGVTaGVldDtcclxuICB9XHJcbiAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBwdWJsaWMgc2V0U3R5bGVzKHNlbGVjdG9yVGV4dDogc3RyaW5nLCBzdHlsZXM6IHsgW3N0eWxlTmFtZTogc3RyaW5nXTogc3RyaW5nIH0gfCBDU1NTdHlsZURlY2xhcmF0aW9uKSB7XHJcbiAgICBsZXQgcnVsZTogQ1NTU3R5bGVSdWxlID0gdGhpcy5nZXRTdHlsZVJ1bGUoc2VsZWN0b3JUZXh0KTtcclxuICAgIGlmKCFydWxlKSByZXR1cm47XHJcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goc3R5bGVOYW1lID0+IHtcclxuICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICBydWxlLnN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZXNbc3R5bGVOYW1lXTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVDc3NTdHlsZVNoZWV0KCk6IENTU1N0eWxlU2hlZXQge1xyXG4gICAgLy8gQ3JlYXRlIHRoZSBzdHlsZSBzaGVldCBlbGVtZW50LlxyXG4gICAgbGV0IHN0eWxlU2hlZXRFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG4gICAgc3R5bGVTaGVldEVsZW1lbnQudHlwZSA9IFwidGV4dC9jc3NcIjtcclxuICAgIC8vIEFwcGVuZCB0aGUgc3R5bGUgc2hlZXQgZWxlbWVudCB0byB0aGUgaGVhZC5cclxuICAgIHRoaXMuaGVhZEVsZW1lbnQuYXBwZW5kQ2hpbGQoc3R5bGVTaGVldEVsZW1lbnQpO1xyXG4gICAgcmV0dXJuIHN0eWxlU2hlZXRFbGVtZW50LnNoZWV0IGFzIENTU1N0eWxlU2hlZXQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFN0eWxlUnVsZShzZWxlY3RvclRleHQ6IHN0cmluZyk6IENTU1N0eWxlUnVsZSB7XHJcbiAgICBpZighdGhpcy5jc3NTdHlsZVNoZWV0KSB7IC8vIEB0cy1pZ25vcmVcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHJ1bGVzOiBDU1NSdWxlTGlzdCA9IHRoaXMuY3NzU3R5bGVTaGVldC5jc3NSdWxlcy5sZW5ndGggPiAwIHx8IHRoaXMuY3NzU3R5bGVTaGVldC5ydWxlcy5sZW5ndGggPT0gMCA/IHRoaXMuY3NzU3R5bGVTaGVldC5jc3NSdWxlcyA6IHRoaXMuY3NzU3R5bGVTaGVldC5ydWxlcztcclxuICAgIGxldCBydWxlOiBDU1NTdHlsZVJ1bGUgPSBBcnJheS5mcm9tKHJ1bGVzKS5maW5kKHIgPT4gciBpbnN0YW5jZW9mIENTU1N0eWxlUnVsZSAmJiByLnNlbGVjdG9yVGV4dC50b0xvd2VyQ2FzZSgpID09IHNlbGVjdG9yVGV4dC50b0xvd2VyQ2FzZSgpKSBhcyBDU1NTdHlsZVJ1bGU7XHJcbiAgICAvLyBJZiB0aGUgc2VsZWN0b3IgcnVsZSBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0LlxyXG4gICAgaWYoIXJ1bGUpIHtcclxuICAgICAgbGV0IHJ1bGVJbmRleCA9IHRoaXMuY3NzU3R5bGVTaGVldC5pbnNlcnRSdWxlKHNlbGVjdG9yVGV4dCArIFwieyB9XCIsIHJ1bGVzLmxlbmd0aCk7XHJcbiAgICAgIHJ1bGUgPSBydWxlc1tydWxlSW5kZXhdIGFzIENTU1N0eWxlUnVsZTtcclxuICAgIH1cclxuICAgIHJldHVybiBydWxlO1xyXG4gIH1cclxufVxyXG4iXX0=